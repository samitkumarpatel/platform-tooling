version: "3.8"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  #https://docs.confluent.io/platform/current/installation/docker/config-reference.html
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.3.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.control-center.rule=Host(`control-center.localhost`)"

  mongodb:
    image: 'mongo:latest'
    container_name: mongodb
    ports:
      - '27017:27017'
  
  postgres:
    image: docker.io/library/postgres:16.2
    container_name: postgres
    depends_on:
      - alloy
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=grafana
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    ports:
      - '5432:5432'

  grafana:
    image: docker.io/grafana/grafana-oss:11.0.0
    container_name: grafana
    depends_on:
      - loki
      - prometheus
      - tempo
    ports:
      - "3000:3000"
    hostname: ${HOST_NAME:-localhost}
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_DATABASE_USER=user
      - GF_DATABASE_PASSWORD=password
      - GF_SECURITY_ADMIN_USER=user
      - GF_SECURITY_ADMIN_PASSWORD=password
    volumes:
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"

  loki:
    image: docker.io/grafana/loki:2.9.7
    container_name: loki
    command: -config.file=/etc/config/loki.yml
    ports:
      - "3100:3100"
    hostname: ${HOST_NAME:-localhost}
    volumes:
      - ./loki/loki.yml:/etc/config/loki.yml
    restart: unless-stopped

  prometheus:
    image: quay.io/prometheus/prometheus:v2.51.2
    container_name: prometheus
    command:
      - "--config.file=/etc/config/prometheus.yml"
      - "--enable-feature=otlp-write-receiver"
      - "--enable-feature=exemplar-storage"
      - "--web.enable-remote-write-receiver"
    ports:
      - "9090"
    hostname: ${HOST_NAME:-localhost}
    volumes:
      - ./prometheus/prometheus.yml:/etc/config/prometheus.yml
    restart: unless-stopped

  tempo:
    image: docker.io/grafana/tempo:2.4.1
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110"     # Tempo
      - "4317"     # OTLP gRPC
      - "4318"     # OTLP HTTP
      - "9411"     # Zipkin
    hostname: ${HOST_NAME:-localhost}
    volumes:
      - ./tempo/tempo.yml:/etc/tempo-config.yml
    restart: unless-stopped

  alloy:
    image: docker.io/grafana/alloy:v1.0.0
    container_name: alloy
    command:
      - "run"
      - "--server.http.listen-addr=0.0.0.0:12345"
      - "--storage.path=/data-alloy"
      - "--disable-reporting"
      - "/etc/alloy/config.alloy"
    depends_on:
      - loki
      - prometheus
      - tempo
    hostname: ${HOST_NAME:-localhost}
    environment:
      - ENVIRONMENT=dev
      - LOKI_URL=http://loki:3100/loki/api/v1/push
      - PROMETHEUS_URL=http://prometheus:9090/api/v1/write
      - TEMPO_URL=http://tempo:4317
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    ports:
      - "12345:12345"
      - "4317:4317"
      - "4318:4318"
    volumes:
      - ./alloy/config.alloy:/etc/alloy/config.alloy
      - /var/run/docker.sock:/var/run/docker.sock
      - alloy-data:/data-alloy
    restart: unless-stopped
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    volumes:
      - ./html:/usr/share/nginx/html
    # ports:
    #   - "8083:80"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`nginx.localhost`)"
  
  reverse-proxy:
    image: traefik:v3.1
    command: --api.insecure=true --providers.docker
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  alloy-data: { }
  grafana-data: { }
  postgres-data: { }